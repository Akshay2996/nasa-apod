{"version":3,"sources":["components/Home.js","components/NavBar.js","components/NasaPhoto.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","NavBar","apiKey","process","NasaPhoto","useState","photoData","setPhotoData","useEffect","a","fetch","res","json","data","console","log","fetchPhoto","media_type","src","url","alt","title","frameBorder","gesture","allow","allowFullScreen","date","explanation","App","component","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6PAaeA,MAVf,WACE,OACE,yBAAKC,UAAU,QACb,kBAAC,IAAD,CAAMA,UAAU,YAAYC,GAAG,cAA/B,yB,iCCSSC,MAZf,WACE,OACE,yBAAKF,UAAU,UACb,4BACE,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,KAA1B,mBCHFE,EAASC,2CAkDAC,MAhDf,WAAqB,MAEeC,mBAAS,MAFxB,mBAEZC,EAFY,KAEDC,EAFC,KAmBnB,OAfAC,qBAAU,WAAM,4CAGd,8BAAAC,EAAA,sEACoBC,MAAM,+CAAD,OAC0BR,IAFnD,cACQS,EADR,gBAKqBA,EAAIC,OALzB,OAKQC,EALR,OAMEN,EAAaM,GACbC,QAAQC,IAAIF,GAPd,4CAHc,0DACdG,KAWC,IAGEV,EAGH,oCACE,kBAAC,EAAD,MACA,yBAAKP,UAAU,cACa,UAAzBO,EAAUW,WACT,yBAAKC,IAAKZ,EAAUa,IAAKC,IAAKd,EAAUe,MAAOtB,UAAU,UAEzD,4BACEsB,MAAM,cACNH,IAAKZ,EAAUa,IACfG,YAAY,IACZC,QAAQ,QACRC,MAAM,kBACNC,iBAAe,EACf1B,UAAU,UAGd,6BACE,4BAAKO,EAAUe,OACf,uBAAGtB,UAAU,QAAQO,EAAUoB,MAC/B,uBAAG3B,UAAU,eAAeO,EAAUqB,gBAtBvB,+B,MCRVC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK7B,UAAU,OACb,kBAAC,IAAD,CAAO8B,UAAW/B,EAAMgC,KAAK,IAAIC,OAAK,IACtC,kBAAC,IAAD,CAAOF,UAAWzB,EAAW0B,KAAK,kBCCtBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.a9df9a61.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Home() {\n  return (\n    <div className=\"home\">\n      <Link className=\"home-link\" to=\"/nasaphoto\">\n        See into the stars!\n      </Link>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction NavBar() {\n  return (\n    <div className=\"navbar\">\n      <ul>\n        <Link className=\"link\" to=\"/\">\n          Take Me Home\n        </Link>\n      </ul>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport NavBar from \"./NavBar\";\n\nconst apiKey = process.env.REACT_APP_NASA_KEY;\n\nfunction NasaPhoto() {\n  // State Management\n  const [photoData, setPhotoData] = useState(null);\n\n  useEffect(() => {\n    fetchPhoto();\n\n    async function fetchPhoto() {\n      const res = await fetch(\n        `https://api.nasa.gov/planetary/apod?api_key=${apiKey}`\n      );\n\n      const data = await res.json();\n      setPhotoData(data);\n      console.log(data);\n    }\n  }, []);\n\n  // Runs only if API is broken or cannot be accessed\n  if (!photoData) return <div />;\n\n  return (\n    <>\n      <NavBar />\n      <div className=\"nasa-photo\">\n        {photoData.media_type === \"image\" ? (\n          <img src={photoData.url} alt={photoData.title} className=\"photo\" />\n        ) : (\n          <iframe\n            title=\"space-video\"\n            src={photoData.url}\n            frameBorder=\"0\"\n            gesture=\"media\"\n            allow=\"encrypted-media\"\n            allowFullScreen\n            className=\"photo\"\n          />\n        )}\n        <div>\n          <h1>{photoData.title}</h1>\n          <p className=\"date\">{photoData.date}</p>\n          <p className=\"explanation\">{photoData.explanation}</p>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default NasaPhoto;\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport NasaPhoto from \"./components/NasaPhoto\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"app\">\n        <Route component={Home} path=\"/\" exact />\n        <Route component={NasaPhoto} path=\"/nasaphoto\" />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}